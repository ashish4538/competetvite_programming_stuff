#include <bits/stdc++.h>
#define int long long

using namespace std;


vector<int>tree;



void build_tree(int n){
    
    
tree.resize(2*n);
 for(int i=0;i<n;i++){
     tree[n+i]=0;
 }
 for(int i=n-1;i>=1;i--){
     tree[i]=0;
 }
    
    
    
}











int sum(int node,int node_low,int node_high,int query_low,int query_high){
    if(query_low<=node_low && node_high<=query_high){
        return tree[node];
    }
    if(node_high<query_low || query_high<node_low){
        return 0;
        
    }
    int last_in_left=(node_low + node_high)/2;
    return sum(2*node,node_low,last_in_left,query_low,query_high)+
      sum(2*node+1,last_in_left+1,node_high,query_low,query_high);
      
}


void change(int node,int  node_low,int node_high,int query_low,int query_high,int v){
    if(query_low<=node_low && node_high<=query_high){
       return tree[node]=v;
    }
    if(node_high<query_low || query_high<node_low){
        return;
        
    }
    int last_in_left=(node_low + node_high)/2;
    change(2*node,node_low,last_in_left,query_low,query_high,v);
      change(2*node+1,last_in_left+1,node_high,query_low,query_high,v);
      tree[node]=tree[2*node]+tree[2*node+1];
}










void solve(){
    
 int n,q;
 cin>>n>>q;

 while(__builtin_popcount(n)!=1){
     
     n++;
 }
 
 build_tree(n);



 for(int i=0;i<q;i++){
     int op,low,high;
     cin>>op>>low>>high;
     low--;
     high--;
     if(op==1){
       cout<<sum(1,0,n-1,low,high)<<"\n";
     }
     else{
         low=low+(n-1);
         high=high+(n-1);
         change(1,0,n-1,low,high,1);
     }
 }

   
 
}








int32_t main()
{

ios::sync_with_stdio(0);
cin.tie(0);
int t;
t=1;
while(t--){

solve();

}
   
   return 0;
   
}